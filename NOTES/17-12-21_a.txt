Introduction to MySQL cursor

Cursor is a temporary area inside memory assigned to every SQL or PL/SQL statement.
To handle a result set inside a stored procedure, you use a cursor. A cursor allows you to iterate a set of rows returned by a query and process each row individually.

two types-
Implicit
Explicit

MySQL cursor is read-only, non-scrollable and asensitive.

Read-only: you cannot update data in the underlying table through the cursor.

Non-scrollable: you can only fetch rows in the order determined by the SELECT statement. You cannot fetch rows in the reversed order. In addition, you cannot skip rows or jump to a specific row in the result set.

Asensitive: there are two kinds of cursors: asensitive cursor and insensitive cursor. An asensitive cursor points to the actual data, whereas an insensitive cursor uses a temporary copy of the data. An asensitive cursor performs faster than an insensitive cursor because it does not have to make a temporary copy of data. However, any change that made to the data from other connections will affect the data that is being used by an asensitive cursor, therefore, it is safer if you do not update the data that is being used by an asensitive cursor. MySQL cursor is asensitive.
You can use MySQL cursors in stored procedures, stored functions, and triggers.

Working with MySQL cursor
First, declare a cursor by using the DECLARE statement:

DECLARE cursor_name CURSOR FOR SELECT_statement;

The cursor declaration must be after any variable declaration. If you declare a cursor before the variable declarations, MySQL will issue an error. A cursor must always associate with a SELECT statement.

Next, open the cursor by using the OPEN statement. The OPEN statement initializes the result set for the cursor, therefore, you must call the OPEN statement before fetching rows from the result set.

OPEN cursor_name;

Then, use the FETCH statement to retrieve the next row pointed by the cursor and move the cursor to the next row in the result set.

FETCH cursor_name INTO variables list;

After that, check if there is any row available before fetching it.

Finally, deactivate the cursor and release the memory associated with it  using the CLOSE statement:

CLOSE cursor_name;
It is a good practice to always close a cursor when it is no longer used.

When working with MySQL cursor, you must also declare a NOT FOUND handler to handle the situation when the cursor could not find any row.

Because each time you call the FETCH statement, the cursor attempts to read the next row in the result set. When the cursor reaches the end of the result set, it will not be able to get the data, and a condition is raised. The handler is used to handle this condition.

To declare a NOT FOUND handler, you use the following syntax:

DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;
The finished is a variable to indicate that the cursor has reached the end of the result set. Notice that the handler declaration must appear after variable and cursor declaration inside the stored procedures.



MySQL Cursor Steps
MySQL Cursor Example
We’ll develop a stored procedure that creates an email list of all employees in the employees table in the sample database.


First, declare some variables, a cursor for looping over the emails of employees, and a NOT FOUND handler:

	DECLARE finished INTEGER DEFAULT 0;
	DECLARE emailAddress varchar(100) DEFAULT "";

	-- declare cursor for employee email
	DEClARE curEmail 
		CURSOR FOR 
			SELECT email FROM employees;

	-- declare NOT FOUND handler
	DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;
Next, open the cursor by using the OPEN statement:

OPEN curEmail;
Then, iterate the email list, and concatenate all emails where each email is separated by a semicolon(;):

       getEmail: LOOP
		FETCH curEmail INTO emailAddress;
		IF finished = 1 THEN 
			LEAVE getEmail;
		END IF;
		-- build email list
		SET emailList = CONCAT(emailAddress,";",emailList);
	END LOOP getEmail;
After that, inside the loop, we used the finished variable to check if there is an email in the list to terminate the loop.

Finally, close the cursor using the CLOSE statement:

CLOSE email_cursor;
The createEmailList stored procedure is as follows:

DELIMITER $$
CREATE OR REPLACE PROCEDURE createEmailList (
	INOUT emailList varchar(4000)
)
BEGIN
	DECLARE finished INTEGER DEFAULT 0;
	DECLARE emailAddress varchar(100) DEFAULT "";

	-- declare cursor for employee email
	DEClARE curEmail 
		CURSOR FOR 
			SELECT email FROM employees;

	-- declare NOT FOUND handler
	DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;

	OPEN curEmail;

	getEmail: LOOP
		FETCH curEmail INTO emailAddress;
		IF finished = 1 THEN 
			LEAVE getEmail;
		END IF;
		-- build email list
		SET emailList = CONCAT(emailAddress,"; \n",emailList);
	END LOOP getEmail;
	CLOSE curEmail;

END$$
DELIMITER ;
You can test the createEmailList stored procedure using the following script:

SET @emailList = ""; 
CALL createEmailList(@emailList); 
SELECT @emailList;


Write a procedure to display the details employees -employee_id,name,salary,department of all those employees who are in department 6.

delimiter $$
create procedure p22(IN v_dep int)
begin
declare v_empid,v_sal int;
declare v_name varchar(40);
declare finished int;
declare curdep cursor for select employee_id,last_name,salary,department_id from employees where department_id=v_dep;
declare continue handler for NOT FOUND SET finished = 1;
open curdep;
getdep:LOOP
fetch curdep into v_empid,v_name,v_sal,v_dep;
If finished =1 then
leave getdep;
endif;
select v_empid,v_name,v_sal,v_dep;
end loop getdep;
close curdep;
end$$


Write a query to create a procedure to display employee number,salary annual salary of all those employees who are working with job_id 5 and that their salaries are greater than 10000.


delimiter $$
create  procedure getann1(IN v_job int,OUT v_sal int,OUT annsal int,OUT v_empid int)
begin
declare finished int default 0;
declare cur2 cursor for select employee_id,salary,salary*12,job_id from employees where job_id=5 and salary > 10000;
declare continue handler for NOT FOUND set finished=1; 
open cur2;
loop1:LOOP
fetch cur2 into v_empid,v_sal,annsal,v_job;
if finished=1 then
leave loop1;
end if;
select v_empid,v_sal,annsal,v_job;
end loop loop1;
close cur2;
end$$

drop procedure procedurename;
drop function functionname;

Write a procedure to display number of employees according to department .

delimiter $$
create procedure p19()
begin
declare v_dept ,v_num int;
declare finished int default 0;
declare cur3 cursor for select department_id,count(employee_id) from employees group by department_id;
declare continue handler for NOT FOUND set finished=1; 
open cur3;
loop2:LOOP
fetch cur3 into v_dept,v_num;
if finished=1 then
leave loop2;
end if;
select v_dept,v_num;
end loop loop2;
close cur3;
end$$


Write a procedure to display name of employee ,jobid ,department name for those employees whose jobid are 6,7,8.

delimiter $$
create procedure p31(IN v_job int,OUT v_name varchar(40),OUT v_dname varchar(40))
begin
declare finished int;
declare cur4 cursor for select e.last_name,e.job_id,d.department_name from employees e inner join departments d on(e.department_id=d.department_id) where job_id in(6,7,8);
declare continue handler for NOT FOUND set finished=1; 
open cur4;
getcu:loop
fetch cur4 into v_name,v_job,v_dname;
if finished =1 then
leave getcu;
end if;
select v_name,v_job,v_dname;
end loop getcu;
close cur4;
end$$



MySQL Triggers

In MySQL, a trigger is a stored program invoked automatically in response to an event such as insert, update, or delete that occurs in the associated table. For example, you can define a trigger that is invoked automatically before a new row is inserted into a table.

MySQL supports triggers that are invoked in response to the INSERT, UPDATE or DELETE event.

The SQL standard defines two types of triggers: row-level triggers and statement-level triggers.

A row-level trigger is activated for each row that is inserted, updated, or deleted.  For example, if a table has 100 rows inserted, updated, or deleted, the trigger is automatically invoked 100 times for the 100 rows affected.
A statement-level trigger is executed once for each transaction regardless of how many rows are inserted, updated, or deleted.
MySQL supports only row-level triggers. It doesn’t support statement-level triggers.


Advantages of triggers
Triggers provide another way to check the integrity of data.
Triggers handle errors from the database layer.
Triggers give an alternative way to run scheduled tasks. By using triggers, you don’t have to wait for the scheduled events to run because the triggers are invoked automatically before or after a change is made to the data in a table.
Triggers can be useful for auditing the data changes in tables.

Disadvantages of triggers
Triggers can only provide extended validations, not all validations. For simple validations, you can use the NOT NULL, UNIQUE, CHECK and FOREIGN KEY constraints.
Triggers can be difficult to troubleshoot because they execute automatically in the database, which may not invisible to the client applications.
Triggers may increase the overhead of the MySQL Server.

Managing MySQL triggers
Create triggers  – describe steps of how to create a trigger in MySQL.
Drop triggers – show you how to drop a trigger.
Create a BEFORE INSERT trigger – show you how to create a BEFORE INSERT trigger to maintain a summary table from another table.
Create an AFTER INSERT trigger – describe how to create an AFTER INSERT trigger to insert data into a table after inserting data into another table.
Create a BEFORE UPDATE trigger – learn how to create a BEFORE UPDATE trigger that validates data before it is updated to the table.
Create an AFTER UPDATE trigger – show you how to create an AFTER UPDATE trigger to log the changes of data in a table.
Create a BEFORE DELETE trigger – show how to create a BEFORE DELETE trigger.
Create an AFTER DELETE trigger – describe how to create an AFTER DELETE trigger.
Create multiple triggers for a table that have the same trigger event and time – MySQL 8.0 allows you to define multiple triggers for a table that have the same trigger event and time.
Show triggers – list triggers in a database, table by specific patterns.

syntax:

Create trigger trigger_name trigger_time trigger_event
on table_name
for each row
begin
...
...
end;

Another employee_audit

id int primary key autoincrement,employee_name varchar,changedat date,action varchar.


create table employee_audit(id int auto_increment primary key,employee_name varchar(50) not null,changedat date,action varchar(30));

delimiter &&
create trigger trig1 before update on employees
for each row
begin
insert into employee_audit
(action,employee_name,changedat) values('update',
old.last_name,now());
end&&


update employees set last_name='frty' where employee_id=200;

the two qualifiers used in triggers.
OLD-old data  
NEW-new data


INSERT-only NEW
UPDATE-both old and new
DELETE-only old


CReate a trigger for before deleting data from employees ,insert the details in employee_audit.

delimiter &&
create or replace trigger trig2 before delete on employees
for each row
begin
insert into employee_audit(action,employee_name,changedat)values('delete',old.last_name,now());
end &&


create a trigger for table departments for AFTER INSERT.

create table dep_audit(id int primary key auto_increment,action varchar(50),dep_id int,dname varchar(50),loc int,insertdat datetime);

DELIMITER $$
create or replace trigger trig3 after insert on departments
for each row
begin
insert into dep_audit(action,dep_id,dname,loc,insertdat) values('insert',new.department_id,new.department_name,new.location_id,now());
end$$

Viewing all triggers -
select * from information_schema.triggers;

use information_schema;

show tables;

select * from triggers;

to view triggers created by user:
show triggers;



Exception handling examples-

Example 1:

create table abc(a int primary key,b int);

delimiter $$
create procedure insertabc(IN x int,IN y int)
begin
declare exit handler for 1062 
begin
select concat('Duplicate key(',x,',',y,') occurred') as message;
end;
insert into abc values(x,y);
select count(*) from abc where a=x;
end$$

call insertabc(1,4);
select * from abc;

MySQL handler precedence 

Incase we have multiple handlers for same error then precendence is given

Rules-
1. An error always maps to a MySQL error code it is most specific.
2. An SQLSTATEmay map to many MySQL error codes ,therefore it is less specific.
3. An SQLEXCEPTION or an SQLWARNING is the most generic.

Precedence

first-MySQL error code
second-SQLSTATE handler
third- SQLEXCEPTION handler

delimiter $$
create procedure insertabc1(IN x int,IN y int)
begin
declare exit handler for 1062 select concat('Duplicate key(',x,',',y,') occurred') as message;
declare exit handler for SQLEXCEPTION select 'SQLException occurred'  message;
declare exit handler for SQLSTATE '23000' select 'SQLSTATE 23000 encountered' error;
insert into abc values(x,y);
select count(*) from abc where a=x;
end$$


Example 3:

delimiter $$
create procedure test()
begin
declare exit handler for 1146 select 'Please create table first'  message;
select * from abc1;
end$$


https://mariadb.com/kb/en/mariadb-error-codes/
